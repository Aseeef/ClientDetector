package de.sportkanone123.clientdetector.spigot.hackdetector.impl;

import de.sportkanone123.clientdetector.spigot.ClientDetector;
import de.sportkanone123.clientdetector.spigot.manager.ConfigManager;
import net.md_5.bungee.api.chat.ClickEvent;
import net.md_5.bungee.api.chat.ComponentBuilder;
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.Player;
import org.bukkit.event.player.AsyncPlayerChatEvent;
import org.bukkit.event.player.PlayerMoveEvent;
import org.bukkit.scheduler.BukkitScheduler;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.UUID;

public class ChatExploit {
    static HashMap<Player, Boolean> verificationStarted = new HashMap<>();
    static HashMap<Player, String> randomString = new HashMap<>();
    static HashMap<Player, Integer> secondsLeft = new HashMap<>();

    public static void startDetection(Player player){
        if(ConfigManager.getConfig("config").getBoolean("hackdetector.chatexploit.enableChatExploit")){
            verificationStarted.put(player, true);
            randomString.put(player, UUID.randomUUID().toString());
            secondsLeft.put(player, 20);

            sendMessage(player);

            BukkitScheduler scheduler = Bukkit.getServer().getScheduler();
            scheduler.scheduleSyncRepeatingTask(ClientDetector.plugin, () -> {
                if (verificationStarted.containsKey(player)) {
                    if (secondsLeft.get(player) - 1 == 0) {
                        Bukkit.dispatchCommand(Bukkit.getConsoleSender(), ChatColor.translateAlternateColorCodes('&', ConfigManager.getConfig("config").getString("hackdetector.chatexploit.punishCommand").replace("%prefix%", ConfigManager.getConfig("message").getString("prefix")).replace("%player_name%", player.getName()).replace("%player_uuid%", player.getUniqueId().toString())));
                    } else {
                        secondsLeft.put(player, secondsLeft.get(player) - 1);
                        sendMessage(player);
                    }
                }
            }, 0L, 20L);
        }
    }

    public static void handleChat(Player player, AsyncPlayerChatEvent event){
        if(randomString.containsKey(player) && event.getMessage().equalsIgnoreCase(".say " + randomString.get(player))){
            verificationStarted.remove(player);

            event.setCancelled(true);

            player.sendMessage(ChatColor.translateAlternateColorCodes('&', ConfigManager.getConfig("message").getString("hackdetector.chatexploit.success").replace("%prefix%", ConfigManager.getConfig("message").getString("prefix"))));
        }
    }

    public static void handleMovement(Player player, PlayerMoveEvent event){
        if(verificationStarted.containsKey(player) && ConfigManager.getConfig("config").getBoolean("hackdetector.chatexploit.disableMoving")){
            event.setCancelled(true);
        }
    }

    public static void sendMessage(Player player){
        if(ConfigManager.getConfig("message").get("hackdetector.chatexploit.clickabletext") != null){
            ArrayList<String> messages = (ArrayList<String>) ConfigManager.getConfig("message").get("hackdetector.chatexploit.clickabletext");
            ComponentBuilder componentBuilder = new ComponentBuilder();

            for(String string: messages){
                componentBuilder = new ComponentBuilder();

                componentBuilder.event(new ClickEvent(ClickEvent.Action.RUN_COMMAND, ".say " + randomString.get(player)));
                componentBuilder.append(ChatColor.translateAlternateColorCodes('&', string.replace("%prefix%", ConfigManager.getConfig("message").getString("prefix")).replace("%time%", secondsLeft.get(player).toString())));

                player.spigot().sendMessage(componentBuilder.create());
            }

        }
    }

    public static void handleQuit(Player player){
        verificationStarted.remove(player);
        randomString.remove(player);
        secondsLeft.remove(player);
    }
}
